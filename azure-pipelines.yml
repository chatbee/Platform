# Docker



# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: test
  displayName: Test
  jobs:
  - job: testNode
    displayName: Test Angular
    steps:
      - task: UseNode@1
        inputs:
          version: '12.x'
          checkLatest: true
      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: '$(Build.SourcesDirectory)/Platform/ClientApp'
      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run test-headless'
          workingDir: '$(Build.SourcesDirectory)/Platform/ClientApp'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish nodejs code coverage results'
        condition: succeededOrFailed()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Build.SourcesDirectory)/Platform/ClientApp/coverage/cobertura-coverage.xml'
          reportDirectory: '$(Build.SourcesDirectory)/Platform/ClientApp/coverage'
          failIfCoverageEmpty: true
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**coverage/**/RESULTS.xml'
          mergeTestResults: true
          failTaskOnFailedTests: true
          testRunTitle: 'Angular'
  - job: testDotnetCore 
    displayName: Test dotnet core
    steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '3.1.x'
      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: '**/PlatformUnitTests.csproj'
          testRunTitle: 'Platform Unit tests'

- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/Platform/Dockerfile'
        tags: |
          $(tag)